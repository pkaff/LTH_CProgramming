<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE abiword PUBLIC "-//ABISOURCE//DTD AWML 1.0 Strict//EN" "http://www.abisource.com/awml.dtd">
<abiword template="false" xmlns:ct="http://www.abisource.com/changetracking.dtd" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:math="http://www.w3.org/1998/Math/MathML" xid-max="341" xmlns:dc="http://purl.org/dc/elements/1.1/" fileformat="1.1" xmlns:svg="http://www.w3.org/2000/svg" xmlns:awml="http://www.abisource.com/awml.dtd" xmlns="http://www.abisource.com/awml.dtd" xmlns:xlink="http://www.w3.org/1999/xlink" version="2.9.2" xml:space="preserve" props="dom-dir:ltr; document-footnote-restart-section:0; document-endnote-type:numeric; document-endnote-place-enddoc:1; document-endnote-initial:1; lang:en-US; document-endnote-restart-section:0; document-footnote-restart-page:0; document-footnote-type:numeric; document-footnote-initial:1; document-endnote-place-endsection:0">
<!-- ======================================================================== -->
<!-- This file is an AbiWord document.                                        -->
<!-- AbiWord is a free, Open Source word processor.                           -->
<!-- More information about AbiWord is available at http://www.abisource.com/ -->
<!-- You should not edit this file by hand.                                   -->
<!-- ======================================================================== -->

<metadata>
<m key="abiword.date_last_changed">2014-09-11T10:35:31</m>
<m key="abiword.generator">AbiWord</m>
<m key="dc.date">2014-09-11T10:32:54</m>
<m key="dc.format">application/x-abiword</m>
<m key="meta:editing-cycles">1</m>
<m key="meta:editing-duration">P0D</m>
</metadata>
<rdf>
<t  s="styles.xml"  p="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"  objecttype="1"  xsdtype=""  >http://docs.oasis-open.org/ns/office/1.2/meta/odf#StylesFile</t>
<t  s="content.xml"  p="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"  objecttype="1"  xsdtype=""  >http://docs.oasis-open.org/ns/office/1.2/meta/odf#ContentFile</t>
<t  s="manifest.rdf"  p="http://docs.oasis-open.org/ns/office/1.2/meta/pkg#hasPart"  objecttype="1"  xsdtype=""  >styles.xml</t>
<t  s="manifest.rdf"  p="http://docs.oasis-open.org/ns/office/1.2/meta/pkg#hasPart"  objecttype="1"  xsdtype=""  >content.xml</t>
<t  s="manifest.rdf"  p="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"  objecttype="1"  xsdtype=""  >http://docs.oasis-open.org/ns/office/1.2/meta/pkg#Document</t>
</rdf>
<history version="2" edit-time="91" last-saved="1411734083" uid="6acf9966-4577-11e4-929a-ef49c61510a1">
<version id="2" started="1411734022" uid="a14e8178-4577-11e4-929a-ef49c61510a1" auto="0" top-xid="333"/>
</history>
<styles>
<s type="P" name="Normal" props="lang:en-US; default-tab-interval:0.4925in; font-size:12pt; font-family:Liberation Serif; dom-dir:ltr"/>
<s type="P" name="Header" basedon="Normal" followedby="Header" props="tabstops:3.3465in/C0,6.6929in/R0"/>
<s type="P" name="Heading" basedon="Normal" followedby="Text body" props="margin-top:0.1665in; keep-with-next:yes; margin-bottom:0.0835in; font-family:Liberation Sans; font-size:14pt"/>
<s type="P" name="Text body" basedon="Normal" followedby="Text body" props="margin-bottom:0.0835in; margin-top:0in"/>
<s type="P" name="Caption" basedon="Normal" followedby="Caption" props="margin-top:0.0835in; font-size:12pt; margin-bottom:0.0835in; font-style:italic"/>
</styles>
<pagesize pagetype="A4" orientation="portrait" width="210.000000" height="297.000000" units="mm" page-scale="1.000000"/>
<section footer="2" header="0" xid="327" props="page-margin-right:0.7874in; page-width:8.2681in; page-margin-header:0.7874in; page-margin-left:0.7874in; page-margin-bottom:0.7874in; page-orientation:portrait; page-margin-top:1.5674in; page-height:11.6929in">
<p style="Normal" xid="328" props="text-align:left; dom-dir:ltr"><c>#include &lt;ctype.h&gt;</c></p>
<p style="Normal" xid="1" props="text-align:left; dom-dir:ltr"><c>#include &lt;stdbool.h&gt;</c></p>
<p style="Normal" xid="2" props="text-align:left; dom-dir:ltr"><c>#include &lt;stdio.h&gt;</c></p>
<p style="Normal" xid="3" props="text-align:left; dom-dir:ltr"><c>#include &lt;stdlib.h&gt;</c></p>
<p style="Normal" xid="4" props="text-align:left; dom-dir:ltr"><c>#include &lt;string.h&gt;</c></p>
<p style="Normal" xid="5" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="6" props="text-align:left; dom-dir:ltr"><c>#include "error.h"</c></p>
<p style="Normal" xid="7" props="text-align:left; dom-dir:ltr"><c>#include "poly.h"</c></p>
<p style="Normal" xid="8" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="9" props="text-align:left; dom-dir:ltr"><c>struct poly_t {</c></p>
<p style="Normal" xid="10" props="text-align:left; dom-dir:ltr"><c>  poly_elem *first;</c></p>
<p style="Normal" xid="11" props="text-align:left; dom-dir:ltr"><c>};</c></p>
<p style="Normal" xid="12" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="13" props="text-align:left; dom-dir:ltr"><c>struct poly_elem {</c></p>
<p style="Normal" xid="14" props="text-align:left; dom-dir:ltr"><c>  poly_elem *next;</c></p>
<p style="Normal" xid="15" props="text-align:left; dom-dir:ltr"><c>  int koeff;</c></p>
<p style="Normal" xid="16" props="text-align:left; dom-dir:ltr"><c>  long exp;</c></p>
<p style="Normal" xid="17" props="text-align:left; dom-dir:ltr"><c>};</c></p>
<p style="Normal" xid="18" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="19" props="text-align:left; dom-dir:ltr"><c>void add_elem(poly_t* poly, poly_elem* element);</c></p>
<p style="Normal" xid="20" props="text-align:left; dom-dir:ltr"><c>int concat(int x, int y);</c></p>
<p style="Normal" xid="21" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="22" props="text-align:left; dom-dir:ltr"><c>poly_t* new_poly_from_string(const char* string) {</c></p>
<p style="Normal" xid="23" props="text-align:left; dom-dir:ltr"><c>  int i, k;</c></p>
<p style="Normal" xid="24" props="text-align:left; dom-dir:ltr"><c>  int sign_index, koeff, last_x_index;</c></p>
<p style="Normal" xid="25" props="text-align:left; dom-dir:ltr"><c>  long exp;</c></p>
<p style="Normal" xid="26" props="text-align:left; dom-dir:ltr"><c> </c></p>
<p style="Normal" xid="27" props="text-align:left; dom-dir:ltr"><c>  //Declare element</c></p>
<p style="Normal" xid="28" props="text-align:left; dom-dir:ltr"><c>  poly_elem* element;</c></p>
<p style="Normal" xid="29" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="30" props="text-align:left; dom-dir:ltr"><c>  //Allocate 1 polynom</c></p>
<p style="Normal" xid="31" props="text-align:left; dom-dir:ltr"><c>  poly_t *polynom;</c></p>
<p style="Normal" xid="32" props="text-align:left; dom-dir:ltr"><c>  polynom = malloc(sizeof(struct poly_t));</c></p>
<p style="Normal" xid="33" props="text-align:left; dom-dir:ltr"><c>  polynom-&gt;first = NULL;</c></p>
<p style="Normal" xid="34" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="35" props="text-align:left; dom-dir:ltr"><c>  sign_index = -2;</c></p>
<p style="Normal" xid="36" props="text-align:left; dom-dir:ltr"><c>  koeff = 1;</c></p>
<p style="Normal" xid="37" props="text-align:left; dom-dir:ltr"><c>  exp = 0;</c></p>
<p style="Normal" xid="38" props="text-align:left; dom-dir:ltr"><c>  last_x_index = 0;</c></p>
<p style="Normal" xid="39" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="40" props="text-align:left; dom-dir:ltr"><c>  //WE ARE ASSUMING THAT POLYNOMIALS ARE WRITTEN IN DEGREEORDER WITH HIGHEST DEGREE FIRST (which makes sense, since polynomials often are written that way)</c></p>
<p style="Normal" xid="41" props="text-align:left; dom-dir:ltr"><c>  //Loop through the string</c></p>
<p style="Normal" xid="42" props="text-align:left; dom-dir:ltr"><c>  for (i = 1; i &lt; strlen(string); i++) {</c></p>
<p style="Normal" xid="43" props="text-align:left; dom-dir:ltr"><c>    //when we find x</c></p>
<p style="Normal" xid="44" props="text-align:left; dom-dir:ltr"><c>    if (string[i - 1] == 'x') {</c></p>
<p style="Normal" xid="45" props="text-align:left; dom-dir:ltr"><c>      //last x index is here</c></p>
<p style="Normal" xid="46" props="text-align:left; dom-dir:ltr"><c>      last_x_index = i - 1;</c></p>
<p style="Normal" xid="47" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="48" props="text-align:left; dom-dir:ltr"><c>      //Allocate 1 new element</c></p>
<p style="Normal" xid="49" props="text-align:left; dom-dir:ltr"><c>      element = malloc(sizeof(struct poly_elem));</c></p>
<p style="Normal" xid="50" props="text-align:left; dom-dir:ltr"><c>      element-&gt;koeff = 1;</c></p>
<p style="Normal" xid="51" props="text-align:left; dom-dir:ltr"><c>      element-&gt;exp = 1;</c></p>
<p style="Normal" xid="52" props="text-align:left; dom-dir:ltr"><c>      element-&gt;next = NULL;</c></p>
<p style="Normal" xid="53" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="54" props="text-align:left; dom-dir:ltr"><c>      //if the sign was '-'</c></p>
<p style="Normal" xid="55" props="text-align:left; dom-dir:ltr"><c>      if (sign_index &gt;= 0) {</c></p>
<p style="Normal" xid="56" props="text-align:left; dom-dir:ltr"><c>	if (string[sign_index] == '-') {</c></p>
<p style="Normal" xid="57" props="text-align:left; dom-dir:ltr"><c>	  element-&gt;koeff = -1;</c></p>
<p style="Normal" xid="58" props="text-align:left; dom-dir:ltr"><c>	} else { //if sign was '+'</c></p>
<p style="Normal" xid="59" props="text-align:left; dom-dir:ltr"><c>	  element-&gt;koeff = 1;</c></p>
<p style="Normal" xid="60" props="text-align:left; dom-dir:ltr"><c>	}</c></p>
<p style="Normal" xid="61" props="text-align:left; dom-dir:ltr"><c>      }</c></p>
<p style="Normal" xid="62" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="63" props="text-align:left; dom-dir:ltr"><c>      //Unless sign was right in front of x (x is at i - 1, space at i - 2)</c></p>
<p style="Normal" xid="64" props="text-align:left; dom-dir:ltr"><c>      if (sign_index != i - 3) {</c></p>
<p style="Normal" xid="65" props="text-align:left; dom-dir:ltr"><c>	//take first number of the koeff</c></p>
<p style="Normal" xid="66" props="text-align:left; dom-dir:ltr"><c>	koeff = string[sign_index + 2] - '0';</c></p>
<p style="Normal" xid="67" props="text-align:left; dom-dir:ltr"><c>	//collect rest of the numbers in the koefficient</c></p>
<p style="Normal" xid="68" props="text-align:left; dom-dir:ltr"><c>	for (k = sign_index + 2; k &lt; last_x_index - 1; k++) {</c></p>
<p style="Normal" xid="69" props="text-align:left; dom-dir:ltr"><c>	  koeff = concat(koeff, string[k + 1] - '0');</c></p>
<p style="Normal" xid="70" props="text-align:left; dom-dir:ltr"><c>	}</c></p>
<p style="Normal" xid="71" props="text-align:left; dom-dir:ltr"><c>	element-&gt;koeff = element-&gt;koeff * koeff;</c></p>
<p style="Normal" xid="72" props="text-align:left; dom-dir:ltr"><c>      }</c></p>
<p style="Normal" xid="73" props="text-align:left; dom-dir:ltr"><c>      </c></p>
<p style="Normal" xid="74" props="text-align:left; dom-dir:ltr"><c>      k = last_x_index;</c></p>
<p style="Normal" xid="75" props="text-align:left; dom-dir:ltr"><c>      //find index of next sign</c></p>
<p style="Normal" xid="76" props="text-align:left; dom-dir:ltr"><c>      while (string[k] != '+' &amp;&amp; string[k] != '-' &amp;&amp; k &lt; strlen(string) - 1) {</c></p>
<p style="Normal" xid="77" props="text-align:left; dom-dir:ltr"><c>	k++;</c></p>
<p style="Normal" xid="78" props="text-align:left; dom-dir:ltr"><c>      }</c></p>
<p style="Normal" xid="79" props="text-align:left; dom-dir:ltr"><c>      sign_index = k;</c></p>
<p style="Normal" xid="80" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="81" props="text-align:left; dom-dir:ltr"><c>      //if we have exponent of x</c></p>
<p style="Normal" xid="82" props="text-align:left; dom-dir:ltr"><c>      if (string[last_x_index + 1] == '^') {</c></p>
<p style="Normal" xid="83" props="text-align:left; dom-dir:ltr"><c>	//save first exp</c></p>
<p style="Normal" xid="84" props="text-align:left; dom-dir:ltr"><c>	exp = string[last_x_index + 2] - '0';</c></p>
<p style="Normal" xid="85" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="86" props="text-align:left; dom-dir:ltr"><c>	//loop until next sign (stop at sign_index - 3 since space separates last exponent number and sign)</c></p>
<p style="Normal" xid="87" props="text-align:left; dom-dir:ltr"><c>	for (k = last_x_index + 2; k &lt; sign_index - 2; k++) {</c></p>
<p style="Normal" xid="88" props="text-align:left; dom-dir:ltr"><c>	  exp = concat(exp, string[k + 1] - '0');</c></p>
<p style="Normal" xid="89" props="text-align:left; dom-dir:ltr"><c>	}</c></p>
<p style="Normal" xid="90" props="text-align:left; dom-dir:ltr"><c>	element-&gt;exp = exp;</c></p>
<p style="Normal" xid="91" props="text-align:left; dom-dir:ltr"><c>      } else {</c></p>
<p style="Normal" xid="92" props="text-align:left; dom-dir:ltr"><c>	exp = 1;</c></p>
<p style="Normal" xid="93" props="text-align:left; dom-dir:ltr"><c>      }</c></p>
<p style="Normal" xid="94" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="95" props="text-align:left; dom-dir:ltr"><c>      //add the element</c></p>
<p style="Normal" xid="96" props="text-align:left; dom-dir:ltr"><c>      add_elem(polynom, element);</c></p>
<p style="Normal" xid="97" props="text-align:left; dom-dir:ltr"><c>      </c></p>
<p style="Normal" xid="98" props="text-align:left; dom-dir:ltr"><c>    } //end if we find x</c></p>
<p style="Normal" xid="99" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="100" props="text-align:left; dom-dir:ltr"><c>  } //end loop through string</c></p>
<p style="Normal" xid="101" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="102" props="text-align:left; dom-dir:ltr"><c>  //if constant exist at end</c></p>
<p style="Normal" xid="103" props="text-align:left; dom-dir:ltr"><c>  if (last_x_index &lt; sign_index) {</c></p>
<p style="Normal" xid="104" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="105" props="text-align:left; dom-dir:ltr"><c>    //Allocate 1 new element</c></p>
<p style="Normal" xid="106" props="text-align:left; dom-dir:ltr"><c>    element = malloc(sizeof(struct poly_elem));</c></p>
<p style="Normal" xid="107" props="text-align:left; dom-dir:ltr"><c>    element-&gt;koeff = 1;</c></p>
<p style="Normal" xid="108" props="text-align:left; dom-dir:ltr"><c>    element-&gt;exp = 0;</c></p>
<p style="Normal" xid="109" props="text-align:left; dom-dir:ltr"><c>    element-&gt;next = NULL;</c></p>
<p style="Normal" xid="110" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="111" props="text-align:left; dom-dir:ltr"><c>    //handle constant</c></p>
<p style="Normal" xid="112" props="text-align:left; dom-dir:ltr"><c>    if (string[sign_index] == '-') {</c></p>
<p style="Normal" xid="113" props="text-align:left; dom-dir:ltr"><c>      element-&gt;koeff = -1;</c></p>
<p style="Normal" xid="114" props="text-align:left; dom-dir:ltr"><c>    } else {</c></p>
<p style="Normal" xid="115" props="text-align:left; dom-dir:ltr"><c>      element-&gt;koeff = 1;</c></p>
<p style="Normal" xid="116" props="text-align:left; dom-dir:ltr"><c>    }</c></p>
<p style="Normal" xid="117" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="118" props="text-align:left; dom-dir:ltr"><c>    //take first number of the koeff</c></p>
<p style="Normal" xid="119" props="text-align:left; dom-dir:ltr"><c>    koeff = string[sign_index + 2] - '0';</c></p>
<p style="Normal" xid="120" props="text-align:left; dom-dir:ltr"><c>    //collect rest of the numbers in the koefficient</c></p>
<p style="Normal" xid="121" props="text-align:left; dom-dir:ltr"><c>    for (k = sign_index + 2; k &lt; strlen(string) - 1; k++) {</c></p>
<p style="Normal" xid="122" props="text-align:left; dom-dir:ltr"><c>      koeff = concat(koeff, string[k + 1] - '0');</c></p>
<p style="Normal" xid="123" props="text-align:left; dom-dir:ltr"><c>    }</c></p>
<p style="Normal" xid="124" props="text-align:left; dom-dir:ltr"><c>    element-&gt;koeff = element-&gt;koeff * koeff;</c></p>
<p style="Normal" xid="125" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="126" props="text-align:left; dom-dir:ltr"><c>    //add the element</c></p>
<p style="Normal" xid="127" props="text-align:left; dom-dir:ltr"><c>    add_elem(polynom, element);</c></p>
<p style="Normal" xid="128" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="129" props="text-align:left; dom-dir:ltr"><c>  } //end if constant exist</c></p>
<p style="Normal" xid="130" props="text-align:left; dom-dir:ltr"><c>  return polynom;</c></p>
<p style="Normal" xid="131" props="text-align:left; dom-dir:ltr"><c>}</c></p>
<p style="Normal" xid="132" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="133" props="text-align:left; dom-dir:ltr"><c>void free_poly(poly_t* p) {</c></p>
<p style="Normal" xid="134" props="text-align:left; dom-dir:ltr"><c>  poly_t* header;</c></p>
<p style="Normal" xid="135" props="text-align:left; dom-dir:ltr"><c>  poly_elem* node;</c></p>
<p style="Normal" xid="136" props="text-align:left; dom-dir:ltr"><c>  poly_elem* temp;</c></p>
<p style="Normal" xid="137" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="138" props="text-align:left; dom-dir:ltr"><c>  node = p-&gt;first;</c></p>
<p style="Normal" xid="139" props="text-align:left; dom-dir:ltr"><c>  header = p;</c></p>
<p style="Normal" xid="140" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="141" props="text-align:left; dom-dir:ltr"><c>  while (node != NULL) {</c></p>
<p style="Normal" xid="142" props="text-align:left; dom-dir:ltr"><c>    temp = node;</c></p>
<p style="Normal" xid="143" props="text-align:left; dom-dir:ltr"><c>    node = node-&gt;next;</c></p>
<p style="Normal" xid="144" props="text-align:left; dom-dir:ltr"><c>    free(temp);</c></p>
<p style="Normal" xid="145" props="text-align:left; dom-dir:ltr"><c>  }</c></p>
<p style="Normal" xid="146" props="text-align:left; dom-dir:ltr"><c>  </c></p>
<p style="Normal" xid="147" props="text-align:left; dom-dir:ltr"><c>  free(header);</c></p>
<p style="Normal" xid="148" props="text-align:left; dom-dir:ltr"><c>}</c></p>
<p style="Normal" xid="149" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="150" props="text-align:left; dom-dir:ltr"><c>poly_t* mul(poly_t* p, poly_t* q) {</c></p>
<p style="Normal" xid="151" props="text-align:left; dom-dir:ltr"><c>  poly_elem* e_p = p-&gt;first;</c></p>
<p style="Normal" xid="152" props="text-align:left; dom-dir:ltr"><c>  poly_elem* e_q = q-&gt;first;</c></p>
<p style="Normal" xid="153" props="text-align:left; dom-dir:ltr"><c>  poly_t* res;</c></p>
<p style="Normal" xid="154" props="text-align:left; dom-dir:ltr"><c>  poly_elem* temp;</c></p>
<p style="Normal" xid="155" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="156" props="text-align:left; dom-dir:ltr"><c>  //Error if no elements</c></p>
<p style="Normal" xid="157" props="text-align:left; dom-dir:ltr"><c>  if (p-&gt;first == NULL || q-&gt;first == NULL) {</c></p>
<p style="Normal" xid="158" props="text-align:left; dom-dir:ltr"><c>    fprintf(stderr, "One or more polynomials are NULL");</c></p>
<p style="Normal" xid="159" props="text-align:left; dom-dir:ltr"><c>    exit(1);</c></p>
<p style="Normal" xid="160" props="text-align:left; dom-dir:ltr"><c>  }</c></p>
<p style="Normal" xid="161" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="162" props="text-align:left; dom-dir:ltr"><c>  //Allocate memory for res and temp</c></p>
<p style="Normal" xid="163" props="text-align:left; dom-dir:ltr"><c>  res = malloc(sizeof(struct poly_t));</c></p>
<p style="Normal" xid="164" props="text-align:left; dom-dir:ltr"><c>  res-&gt;first = NULL;</c></p>
<p style="Normal" xid="165" props="text-align:left; dom-dir:ltr"><c>  temp = malloc(sizeof(struct poly_elem));</c></p>
<p style="Normal" xid="166" props="text-align:left; dom-dir:ltr"><c>  temp-&gt;koeff = 1;</c></p>
<p style="Normal" xid="167" props="text-align:left; dom-dir:ltr"><c>  temp-&gt;exp = 0;</c></p>
<p style="Normal" xid="168" props="text-align:left; dom-dir:ltr"><c>  temp-&gt;next = NULL;</c></p>
<p style="Normal" xid="169" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="170" props="text-align:left; dom-dir:ltr"><c>  //Loop through all elements in the polynomials, size order is solved by itself but we need to consider</c></p>
<p style="Normal" xid="171" props="text-align:left; dom-dir:ltr"><c>  //when we get 2 elements of the same degree; add them.</c></p>
<p style="Normal" xid="172" props="text-align:left; dom-dir:ltr"><c>  while (e_p != NULL) {</c></p>
<p style="Normal" xid="173" props="text-align:left; dom-dir:ltr"><c>    while(e_q != NULL) {</c></p>
<p style="Normal" xid="174" props="text-align:left; dom-dir:ltr"><c>      temp-&gt;koeff = e_p-&gt;koeff * e_q-&gt;koeff;</c></p>
<p style="Normal" xid="175" props="text-align:left; dom-dir:ltr"><c>      temp-&gt;exp = e_p-&gt;exp + e_q-&gt;exp;</c></p>
<p style="Normal" xid="176" props="text-align:left; dom-dir:ltr"><c>      e_q = e_q-&gt;next;</c></p>
<p style="Normal" xid="177" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="178" props="text-align:left; dom-dir:ltr"><c>      //Add temp to res</c></p>
<p style="Normal" xid="179" props="text-align:left; dom-dir:ltr"><c>      add_elem(res, temp); </c></p>
<p style="Normal" xid="180" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="181" props="text-align:left; dom-dir:ltr"><c>      //Allocate another element</c></p>
<p style="Normal" xid="182" props="text-align:left; dom-dir:ltr"><c>      temp = malloc(sizeof(struct poly_elem));</c></p>
<p style="Normal" xid="183" props="text-align:left; dom-dir:ltr"><c>      temp-&gt;koeff = 1;</c></p>
<p style="Normal" xid="184" props="text-align:left; dom-dir:ltr"><c>      temp-&gt;exp = 0;</c></p>
<p style="Normal" xid="185" props="text-align:left; dom-dir:ltr"><c>      temp-&gt;next = NULL;</c></p>
<p style="Normal" xid="186" props="text-align:left; dom-dir:ltr"><c>    }</c></p>
<p style="Normal" xid="187" props="text-align:left; dom-dir:ltr"><c>    e_q = q-&gt;first;</c></p>
<p style="Normal" xid="188" props="text-align:left; dom-dir:ltr"><c>    e_p = e_p-&gt;next;</c></p>
<p style="Normal" xid="189" props="text-align:left; dom-dir:ltr"><c>  }</c></p>
<p style="Normal" xid="190" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="191" props="text-align:left; dom-dir:ltr"><c>  return res;</c></p>
<p style="Normal" xid="192" props="text-align:left; dom-dir:ltr"><c>}</c></p>
<p style="Normal" xid="193" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="194" props="text-align:left; dom-dir:ltr"><c>void print_poly(poly_t* p) {</c></p>
<p style="Normal" xid="195" props="text-align:left; dom-dir:ltr"><c>  poly_elem* temp;</c></p>
<p style="Normal" xid="196" props="text-align:left; dom-dir:ltr"><c>  int sign;</c></p>
<p style="Normal" xid="197" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="198" props="text-align:left; dom-dir:ltr"><c>  temp = p-&gt;first;</c></p>
<p style="Normal" xid="199" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="200" props="text-align:left; dom-dir:ltr"><c>  //Nothing to print</c></p>
<p style="Normal" xid="201" props="text-align:left; dom-dir:ltr"><c>  if (temp == NULL) {</c></p>
<p style="Normal" xid="202" props="text-align:left; dom-dir:ltr"><c>    return;</c></p>
<p style="Normal" xid="203" props="text-align:left; dom-dir:ltr"><c>  }</c></p>
<p style="Normal" xid="204" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="205" props="text-align:left; dom-dir:ltr"><c>  //Print first element</c></p>
<p style="Normal" xid="206" props="text-align:left; dom-dir:ltr"><c>  if (temp-&gt;koeff != 1) {</c></p>
<p style="Normal" xid="207" props="text-align:left; dom-dir:ltr"><c>    if (temp-&gt;koeff &gt; 0) {</c></p>
<p style="Normal" xid="208" props="text-align:left; dom-dir:ltr"><c>      if (temp-&gt;exp != 1) {</c></p>
<p style="Normal" xid="209" props="text-align:left; dom-dir:ltr"><c>	printf("%d x^%ld", temp-&gt;koeff, temp-&gt;exp);</c></p>
<p style="Normal" xid="210" props="text-align:left; dom-dir:ltr"><c>      } else {</c></p>
<p style="Normal" xid="211" props="text-align:left; dom-dir:ltr"><c>	printf("%d x", temp-&gt;koeff);</c></p>
<p style="Normal" xid="212" props="text-align:left; dom-dir:ltr"><c>      }</c></p>
<p style="Normal" xid="213" props="text-align:left; dom-dir:ltr"><c>    } else {</c></p>
<p style="Normal" xid="214" props="text-align:left; dom-dir:ltr"><c>      if (temp-&gt;exp != 1) {</c></p>
<p style="Normal" xid="215" props="text-align:left; dom-dir:ltr"><c>	printf("-%d x^%ld", abs(temp-&gt;koeff), temp-&gt;exp);</c></p>
<p style="Normal" xid="216" props="text-align:left; dom-dir:ltr"><c>      } else {</c></p>
<p style="Normal" xid="217" props="text-align:left; dom-dir:ltr"><c>	printf("-%d x", abs(temp-&gt;koeff));</c></p>
<p style="Normal" xid="218" props="text-align:left; dom-dir:ltr"><c>      }</c></p>
<p style="Normal" xid="219" props="text-align:left; dom-dir:ltr"><c>    }</c></p>
<p style="Normal" xid="220" props="text-align:left; dom-dir:ltr"><c>  } else if (temp-&gt;exp != 1) {</c></p>
<p style="Normal" xid="221" props="text-align:left; dom-dir:ltr"><c>    printf("x^%ld", temp-&gt;exp);</c></p>
<p style="Normal" xid="222" props="text-align:left; dom-dir:ltr"><c>  } else {</c></p>
<p style="Normal" xid="223" props="text-align:left; dom-dir:ltr"><c>    printf("x ");</c></p>
<p style="Normal" xid="224" props="text-align:left; dom-dir:ltr"><c>  }</c></p>
<p style="Normal" xid="225" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="226" props="text-align:left; dom-dir:ltr"><c>  temp = temp-&gt;next;</c></p>
<p style="Normal" xid="227" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="228" props="text-align:left; dom-dir:ltr"><c>  while (temp != NULL) {</c></p>
<p style="Normal" xid="229" props="text-align:left; dom-dir:ltr"><c>    //Check sign</c></p>
<p style="Normal" xid="230" props="text-align:left; dom-dir:ltr"><c>    if (temp-&gt;koeff &lt; 0) {</c></p>
<p style="Normal" xid="231" props="text-align:left; dom-dir:ltr"><c>      sign = -1;</c></p>
<p style="Normal" xid="232" props="text-align:left; dom-dir:ltr"><c>    } else {</c></p>
<p style="Normal" xid="233" props="text-align:left; dom-dir:ltr"><c>      sign = 1;</c></p>
<p style="Normal" xid="234" props="text-align:left; dom-dir:ltr"><c>    }</c></p>
<p style="Normal" xid="235" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="236" props="text-align:left; dom-dir:ltr"><c>    //If constant</c></p>
<p style="Normal" xid="237" props="text-align:left; dom-dir:ltr"><c>    if (temp-&gt;exp == 0) {</c></p>
<p style="Normal" xid="238" props="text-align:left; dom-dir:ltr"><c>      if (sign == -1) {</c></p>
<p style="Normal" xid="239" props="text-align:left; dom-dir:ltr"><c>  	printf(" - %d", abs(temp-&gt;koeff));</c></p>
<p style="Normal" xid="240" props="text-align:left; dom-dir:ltr"><c>      } else {</c></p>
<p style="Normal" xid="241" props="text-align:left; dom-dir:ltr"><c>  	printf(" + %d", temp-&gt;koeff);</c></p>
<p style="Normal" xid="242" props="text-align:left; dom-dir:ltr"><c>      }</c></p>
<p style="Normal" xid="243" props="text-align:left; dom-dir:ltr"><c>    }</c></p>
<p style="Normal" xid="244" props="text-align:left; dom-dir:ltr"><c>    </c></p>
<p style="Normal" xid="245" props="text-align:left; dom-dir:ltr"><c>    //if x^1</c></p>
<p style="Normal" xid="246" props="text-align:left; dom-dir:ltr"><c>    if (temp-&gt;koeff != 1 &amp;&amp; temp-&gt;exp == 1) {</c></p>
<p style="Normal" xid="247" props="text-align:left; dom-dir:ltr"><c>      if (sign == -1) {</c></p>
<p style="Normal" xid="248" props="text-align:left; dom-dir:ltr"><c>	printf(" - %d x", abs(temp-&gt;koeff));</c></p>
<p style="Normal" xid="249" props="text-align:left; dom-dir:ltr"><c>      } else {</c></p>
<p style="Normal" xid="250" props="text-align:left; dom-dir:ltr"><c>	printf(" + %d x", temp-&gt;koeff);</c></p>
<p style="Normal" xid="251" props="text-align:left; dom-dir:ltr"><c>      }</c></p>
<p style="Normal" xid="252" props="text-align:left; dom-dir:ltr"><c>    } else if (temp-&gt;koeff == 1 &amp;&amp; temp-&gt;exp == 1) {</c></p>
<p style="Normal" xid="253" props="text-align:left; dom-dir:ltr"><c>      if (sign == -1) {</c></p>
<p style="Normal" xid="254" props="text-align:left; dom-dir:ltr"><c>	printf(" - x");</c></p>
<p style="Normal" xid="255" props="text-align:left; dom-dir:ltr"><c>      } else {</c></p>
<p style="Normal" xid="256" props="text-align:left; dom-dir:ltr"><c>	printf(" + x");</c></p>
<p style="Normal" xid="257" props="text-align:left; dom-dir:ltr"><c>      }</c></p>
<p style="Normal" xid="258" props="text-align:left; dom-dir:ltr"><c>    }</c></p>
<p style="Normal" xid="259" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="260" props="text-align:left; dom-dir:ltr"><c>    //other case</c></p>
<p style="Normal" xid="261" props="text-align:left; dom-dir:ltr"><c>    if (temp-&gt;koeff != 1 &amp;&amp; temp-&gt;exp &gt; 1) {</c></p>
<p style="Normal" xid="262" props="text-align:left; dom-dir:ltr"><c>      if (sign == -1) {</c></p>
<p style="Normal" xid="263" props="text-align:left; dom-dir:ltr"><c>	printf(" - %d x^%ld", abs(temp-&gt;koeff), temp-&gt;exp);</c></p>
<p style="Normal" xid="264" props="text-align:left; dom-dir:ltr"><c>      } else {</c></p>
<p style="Normal" xid="265" props="text-align:left; dom-dir:ltr"><c>	printf(" + %d x^%ld", temp-&gt;koeff, temp-&gt;exp);</c></p>
<p style="Normal" xid="266" props="text-align:left; dom-dir:ltr"><c>      }</c></p>
<p style="Normal" xid="267" props="text-align:left; dom-dir:ltr"><c>    } else if (temp-&gt;koeff == 1 &amp;&amp; temp-&gt;exp &gt; 1) {</c></p>
<p style="Normal" xid="268" props="text-align:left; dom-dir:ltr"><c>      if (sign == -1) {</c></p>
<p style="Normal" xid="269" props="text-align:left; dom-dir:ltr"><c>	printf(" - x^%ld", temp-&gt;exp);</c></p>
<p style="Normal" xid="270" props="text-align:left; dom-dir:ltr"><c>      } else {</c></p>
<p style="Normal" xid="271" props="text-align:left; dom-dir:ltr"><c>	printf(" + x^%ld", temp-&gt;exp);</c></p>
<p style="Normal" xid="272" props="text-align:left; dom-dir:ltr"><c>      }</c></p>
<p style="Normal" xid="273" props="text-align:left; dom-dir:ltr"><c>    }</c></p>
<p style="Normal" xid="274" props="text-align:left; dom-dir:ltr"><c>    temp = temp-&gt;next;</c></p>
<p style="Normal" xid="275" props="text-align:left; dom-dir:ltr"><c>  } //end while</c></p>
<p style="Normal" xid="276" props="text-align:left; dom-dir:ltr"><c>  printf("\n");</c></p>
<p style="Normal" xid="277" props="text-align:left; dom-dir:ltr"><c>}</c></p>
<p style="Normal" xid="278" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="279" props="text-align:left; dom-dir:ltr"><c>//Adds elements in size order (exponents)</c></p>
<p style="Normal" xid="280" props="text-align:left; dom-dir:ltr"><c>void add_elem(poly_t* poly, poly_elem* element) {</c></p>
<p style="Normal" xid="281" props="text-align:left; dom-dir:ltr"><c>  poly_elem* temp;</c></p>
<p style="Normal" xid="282" props="text-align:left; dom-dir:ltr"><c>  poly_elem* pre_temp;</c></p>
<p style="Normal" xid="283" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="284" props="text-align:left; dom-dir:ltr"><c>  //if empty list</c></p>
<p style="Normal" xid="285" props="text-align:left; dom-dir:ltr"><c>  if (poly-&gt;first == NULL) {</c></p>
<p style="Normal" xid="286" props="text-align:left; dom-dir:ltr"><c>    poly-&gt;first = element;</c></p>
<p style="Normal" xid="287" props="text-align:left; dom-dir:ltr"><c>    return;</c></p>
<p style="Normal" xid="288" props="text-align:left; dom-dir:ltr"><c>  }</c></p>
<p style="Normal" xid="289" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="290" props="text-align:left; dom-dir:ltr"><c>  temp = poly-&gt;first;</c></p>
<p style="Normal" xid="291" props="text-align:left; dom-dir:ltr"><c>  pre_temp = temp;</c></p>
<p style="Normal" xid="292" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="293" props="text-align:left; dom-dir:ltr"><c>  //if more than 1 element, add element to list</c></p>
<p style="Normal" xid="294" props="text-align:left; dom-dir:ltr"><c>  while (temp != NULL) {</c></p>
<p style="Normal" xid="295" props="text-align:left; dom-dir:ltr"><c>    //same exp, add koeffs and free</c></p>
<p style="Normal" xid="296" props="text-align:left; dom-dir:ltr"><c>    if (temp-&gt;exp == element-&gt;exp) {</c></p>
<p style="Normal" xid="297" props="text-align:left; dom-dir:ltr"><c>      temp-&gt;koeff = temp-&gt;koeff + element-&gt;koeff;</c></p>
<p style="Normal" xid="298" props="text-align:left; dom-dir:ltr"><c>      free(element);</c></p>
<p style="Normal" xid="299" props="text-align:left; dom-dir:ltr"><c>      return;</c></p>
<p style="Normal" xid="300" props="text-align:left; dom-dir:ltr"><c>    } else if (temp-&gt;exp &lt; element-&gt;exp) {</c></p>
<p style="Normal" xid="301" props="text-align:left; dom-dir:ltr"><c>      //if we're at first element in the list, put element first</c></p>
<p style="Normal" xid="302" props="text-align:left; dom-dir:ltr"><c>      if (poly-&gt;first == temp) {</c></p>
<p style="Normal" xid="303" props="text-align:left; dom-dir:ltr"><c>	poly-&gt;first = element;</c></p>
<p style="Normal" xid="304" props="text-align:left; dom-dir:ltr"><c>	element-&gt;next = temp;</c></p>
<p style="Normal" xid="305" props="text-align:left; dom-dir:ltr"><c>	return;</c></p>
<p style="Normal" xid="306" props="text-align:left; dom-dir:ltr"><c>      }</c></p>
<p style="Normal" xid="307" props="text-align:left; dom-dir:ltr"><c>      //put element before temp</c></p>
<p style="Normal" xid="308" props="text-align:left; dom-dir:ltr"><c>      element-&gt;next = temp;</c></p>
<p style="Normal" xid="309" props="text-align:left; dom-dir:ltr"><c>      pre_temp-&gt;next = element;      </c></p>
<p style="Normal" xid="310" props="text-align:left; dom-dir:ltr"><c>      return;</c></p>
<p style="Normal" xid="311" props="text-align:left; dom-dir:ltr"><c>    } else if (temp-&gt;exp &gt; element-&gt;exp) {</c></p>
<p style="Normal" xid="312" props="text-align:left; dom-dir:ltr"><c>      //check with next element</c></p>
<p style="Normal" xid="313" props="text-align:left; dom-dir:ltr"><c>      if (temp-&gt;next == NULL) {</c></p>
<p style="Normal" xid="314" props="text-align:left; dom-dir:ltr"><c>	temp-&gt;next = element;</c></p>
<p style="Normal" xid="315" props="text-align:left; dom-dir:ltr"><c>	return;</c></p>
<p style="Normal" xid="316" props="text-align:left; dom-dir:ltr"><c>      }</c></p>
<p style="Normal" xid="317" props="text-align:left; dom-dir:ltr"><c>      pre_temp = temp;</c></p>
<p style="Normal" xid="318" props="text-align:left; dom-dir:ltr"><c>      temp = temp-&gt;next;</c></p>
<p style="Normal" xid="319" props="text-align:left; dom-dir:ltr"><c>    }</c></p>
<p style="Normal" xid="320" props="text-align:left; dom-dir:ltr"><c>  } //end while</c></p>
<p style="Normal" xid="321" props="text-align:left; dom-dir:ltr"><c>}</c></p>
<p style="Normal" xid="322" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="323" props="text-align:left; dom-dir:ltr"><c>int concat(int x, int y) {</c></p>
<p style="Normal" xid="324" props="text-align:left; dom-dir:ltr"><c>  return x*10 + y;</c></p>
<p style="Normal" xid="325" props="text-align:left; dom-dir:ltr"><c>}</c></p>
<p style="Normal" xid="326" props="text-align:left; dom-dir:ltr"><c></c></p>
</section>
<section id="2" listid="0" parentid="0" type="footer" xid="339">
<p xid="340" props="text-align:right"><field type="page_number" xid="341"></field></p>
</section>
<section id="0" type="header" xid="329">
<p style="Header" xid="330">Daniel Odenbrand</p>
<p style="Header" xid="331">920614-4611		C-Programmering, EDAA25</p>
<p style="Header" xid="332">Pi4, LTH		</p>
<p style="Header" xid="333">tpi11dod</p>
</section>
</abiword>
